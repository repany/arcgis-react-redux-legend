define(['exports', 'esri/request'], function (exports, _request) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.TOGGLE_LEGEND_NODE_VISIBLE = exports.TOGGLE_LEGEND_NODE_EXPANDED = exports.SET_INITIAL_LEGEND_DATA = exports.RECEIVE_LEGEND_DATA = exports.REQUEST_LEGEND_DATA = exports.RESET_LEGEND_IS_FETCHING = exports.SET_CURRENT_SCALE = undefined;
    exports.setCurrentScale = setCurrentScale;
    exports.fetchLegend = fetchLegend;
    exports.setInitialLegend = setInitialLegend;
    exports.toggleNodeExpanded = toggleNodeExpanded;
    exports.toggleNodeVisible = toggleNodeVisible;

    var _request2 = _interopRequireDefault(_request);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var SET_CURRENT_SCALE = exports.SET_CURRENT_SCALE = 'SET_CURRENT_SCALE';
    function setCurrentScale(currentScale) {
        return {
            type: SET_CURRENT_SCALE,
            currentScale: currentScale
        };
    }

    var RESET_LEGEND_IS_FETCHING = exports.RESET_LEGEND_IS_FETCHING = 'RESET_LEGEND_IS_FETCHING';
    function resetLegendIsFetching() {
        return {
            type: RESET_LEGEND_IS_FETCHING
        };
    }

    var REQUEST_LEGEND_DATA = exports.REQUEST_LEGEND_DATA = 'REQUEST_LEGEND_DATA';
    function requestLegendData(url, mapId) {
        return {
            type: REQUEST_LEGEND_DATA,
            url: url,
            mapId: mapId
        };
    }

    var RECEIVE_LEGEND_DATA = exports.RECEIVE_LEGEND_DATA = 'RECEIVE_LEGEND_DATA';
    function receiveLegendData(json, url, mapId) {
        return {
            type: RECEIVE_LEGEND_DATA,
            layers: json.layers,
            url: url,
            mapId: mapId
        };
    }

    function fetchLegend(url, mapId) {

        return function (dispatch) {
            return (0, _request2.default)(url + '/legend?f=json').then(function (response) {
                dispatch(receiveLegendData(response.data, url, mapId));
            }, function (error) {
                console.error(error);
                dispatch(resetLegendIsFetching());
            });
        };
    }

    var SET_INITIAL_LEGEND_DATA = exports.SET_INITIAL_LEGEND_DATA = 'SET_INITIAL_LEGEND_DATA';
    function setInitialLegend(view, mapId) {
        return {
            type: SET_INITIAL_LEGEND_DATA,
            view: view,
            mapId: mapId
        };
    }

    var TOGGLE_LEGEND_NODE_EXPANDED = exports.TOGGLE_LEGEND_NODE_EXPANDED = 'TOGGLE_LEGEND_NODE_EXPANDED';
    function toggleNodeExpanded(nodeId, mapId) {
        return {
            type: TOGGLE_LEGEND_NODE_EXPANDED,
            nodeId: nodeId,
            mapId: mapId
        };
    }

    var TOGGLE_LEGEND_NODE_VISIBLE = exports.TOGGLE_LEGEND_NODE_VISIBLE = 'TOGGLE_LEGEND_NODE_VISIBLE';
    function toggleNodeVisible(nodeId, mapId) {
        return {
            type: TOGGLE_LEGEND_NODE_VISIBLE,
            nodeId: nodeId,
            mapId: mapId
        };
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGlvbnNcXG1hcC1sZWdlbmQtYWN0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O1lBR2dCLGUsR0FBQSxlO1lBaUNBLFcsR0FBQSxXO1lBY0EsZ0IsR0FBQSxnQjtZQVNBLGtCLEdBQUEsa0I7WUFTQSxpQixHQUFBLGlCOzs7Ozs7Ozs7O0FBbEVULFFBQU0sZ0RBQW9CLG1CQUExQjtBQUNBLGFBQVMsZUFBVCxDQUF5QixZQUF6QixFQUF1QztBQUMxQyxlQUFPO0FBQ0gsa0JBQU0saUJBREg7QUFFSDtBQUZHLFNBQVA7QUFJSDs7QUFFTSxRQUFNLDhEQUEyQiwwQkFBakM7QUFDUCxhQUFTLHFCQUFULEdBQWlDO0FBQzdCLGVBQU87QUFDSCxrQkFBTTtBQURILFNBQVA7QUFHSDs7QUFFTSxRQUFNLG9EQUFzQixxQkFBNUI7QUFDUCxhQUFTLGlCQUFULENBQTJCLEdBQTNCLEVBQWdDLEtBQWhDLEVBQXVDO0FBQ25DLGVBQU87QUFDSCxrQkFBTSxtQkFESDtBQUVILG9CQUZHO0FBR0g7QUFIRyxTQUFQO0FBS0g7O0FBRU0sUUFBTSxvREFBc0IscUJBQTVCO0FBQ1AsYUFBUyxpQkFBVCxDQUEyQixJQUEzQixFQUFpQyxHQUFqQyxFQUFzQyxLQUF0QyxFQUE2QztBQUN6QyxlQUFPO0FBQ0gsa0JBQU0sbUJBREg7QUFFSCxvQkFBUSxLQUFLLE1BRlY7QUFHSCxvQkFIRztBQUlIO0FBSkcsU0FBUDtBQU1IOztBQUVNLGFBQVMsV0FBVCxDQUFxQixHQUFyQixFQUEwQixLQUExQixFQUFpQzs7QUFFcEMsZUFBTyxVQUFVLFFBQVYsRUFBb0I7QUFDdkIsbUJBQU8sdUJBQVksTUFBTSxnQkFBbEIsRUFDRixJQURFLENBQ0csVUFBUyxRQUFULEVBQWtCO0FBQ3BCLHlCQUFTLGtCQUFrQixTQUFTLElBQTNCLEVBQWlDLEdBQWpDLEVBQXNDLEtBQXRDLENBQVQ7QUFDSCxhQUhFLEVBR0EsVUFBUyxLQUFULEVBQWU7QUFDZCx3QkFBUSxLQUFSLENBQWMsS0FBZDtBQUNBLHlCQUFTLHVCQUFUO0FBQ0gsYUFORSxDQUFQO0FBT0gsU0FSRDtBQVNIOztBQUVNLFFBQU0sNERBQTBCLHlCQUFoQztBQUNBLGFBQVMsZ0JBQVQsQ0FBMEIsSUFBMUIsRUFBZ0MsS0FBaEMsRUFBdUM7QUFDMUMsZUFBTztBQUNILGtCQUFNLHVCQURIO0FBRUgsc0JBRkc7QUFHSDtBQUhHLFNBQVA7QUFLSDs7QUFFTSxRQUFNLG9FQUE4Qiw2QkFBcEM7QUFDQSxhQUFTLGtCQUFULENBQTRCLE1BQTVCLEVBQW9DLEtBQXBDLEVBQTJDO0FBQzlDLGVBQU87QUFDSCxrQkFBTSwyQkFESDtBQUVILDBCQUZHO0FBR0g7QUFIRyxTQUFQO0FBS0g7O0FBRU0sUUFBTSxrRUFBNkIsNEJBQW5DO0FBQ0EsYUFBUyxpQkFBVCxDQUEyQixNQUEzQixFQUFtQyxLQUFuQyxFQUEwQztBQUM3QyxlQUFPO0FBQ0gsa0JBQU0sMEJBREg7QUFFSCwwQkFGRztBQUdIO0FBSEcsU0FBUDtBQUtIIiwiZmlsZSI6ImFjdGlvbnNcXG1hcC1sZWdlbmQtYWN0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlc3JpUmVxdWVzdCBmcm9tICdlc3JpL3JlcXVlc3QnXHJcblxyXG5leHBvcnQgY29uc3QgU0VUX0NVUlJFTlRfU0NBTEUgPSAnU0VUX0NVUlJFTlRfU0NBTEUnXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRDdXJyZW50U2NhbGUoY3VycmVudFNjYWxlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFNFVF9DVVJSRU5UX1NDQUxFLFxyXG4gICAgICAgIGN1cnJlbnRTY2FsZVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUkVTRVRfTEVHRU5EX0lTX0ZFVENISU5HID0gJ1JFU0VUX0xFR0VORF9JU19GRVRDSElORydcclxuZnVuY3Rpb24gcmVzZXRMZWdlbmRJc0ZldGNoaW5nKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBSRVNFVF9MRUdFTkRfSVNfRkVUQ0hJTkdcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJFUVVFU1RfTEVHRU5EX0RBVEEgPSAnUkVRVUVTVF9MRUdFTkRfREFUQSdcclxuZnVuY3Rpb24gcmVxdWVzdExlZ2VuZERhdGEodXJsLCBtYXBJZCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBSRVFVRVNUX0xFR0VORF9EQVRBLFxyXG4gICAgICAgIHVybCxcclxuICAgICAgICBtYXBJZFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUkVDRUlWRV9MRUdFTkRfREFUQSA9ICdSRUNFSVZFX0xFR0VORF9EQVRBJ1xyXG5mdW5jdGlvbiByZWNlaXZlTGVnZW5kRGF0YShqc29uLCB1cmwsIG1hcElkKSB7ICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBSRUNFSVZFX0xFR0VORF9EQVRBLFxyXG4gICAgICAgIGxheWVyczoganNvbi5sYXllcnMsXHJcbiAgICAgICAgdXJsLFxyXG4gICAgICAgIG1hcElkXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaExlZ2VuZCh1cmwsIG1hcElkKSB7XHJcbiAgXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIGVzcmlSZXF1ZXN0KHVybCArICcvbGVnZW5kP2Y9anNvbicpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHJlY2VpdmVMZWdlbmREYXRhKHJlc3BvbnNlLmRhdGEsIHVybCwgbWFwSWQpKVxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcil7IFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHJlc2V0TGVnZW5kSXNGZXRjaGluZygpKSBcclxuICAgICAgICAgICAgfSkgICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU0VUX0lOSVRJQUxfTEVHRU5EX0RBVEEgPSAnU0VUX0lOSVRJQUxfTEVHRU5EX0RBVEEnXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRJbml0aWFsTGVnZW5kKHZpZXcsIG1hcElkKSB7ICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBTRVRfSU5JVElBTF9MRUdFTkRfREFUQSxcclxuICAgICAgICB2aWV3LFxyXG4gICAgICAgIG1hcElkXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUT0dHTEVfTEVHRU5EX05PREVfRVhQQU5ERUQgPSAnVE9HR0xFX0xFR0VORF9OT0RFX0VYUEFOREVEJ1xyXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlTm9kZUV4cGFuZGVkKG5vZGVJZCwgbWFwSWQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogVE9HR0xFX0xFR0VORF9OT0RFX0VYUEFOREVELFxyXG4gICAgICAgIG5vZGVJZCxcclxuICAgICAgICBtYXBJZFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVE9HR0xFX0xFR0VORF9OT0RFX1ZJU0lCTEUgPSAnVE9HR0xFX0xFR0VORF9OT0RFX1ZJU0lCTEUnXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVOb2RlVmlzaWJsZShub2RlSWQsIG1hcElkKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IFRPR0dMRV9MRUdFTkRfTk9ERV9WSVNJQkxFLFxyXG4gICAgICAgIG5vZGVJZCxcclxuICAgICAgICBtYXBJZFxyXG4gICAgfVxyXG59Il19